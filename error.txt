
---

# 🧩 Design Document: Local TCP Bridge (MT5 ⇄ VPS Relay)

### **Project:** Crash 900 Signal Infrastructure

### **Module:** Local Python Bridge

### **Version:** 1.0

### **Purpose:** Provide reliable communication between MT5 EA (local) and the remote VPS signal server.

---

## 🧠 1. High-Level Architecture

```
        ┌─────────────────────────────┐
        │      MetaTrader 5 EA        │
        │   (TCP Client via Winsock)  │
        │      localhost:5050         │
        └──────────────┬──────────────┘
                       │
                       ▼
        ┌─────────────────────────────┐
        │     Local Python Bridge     │
        │   - TCP Server (for EA)     │
        │   - TCP Client (to VPS)     │
        │   - Message relay layer     │
        │   - Handles framing/auth    │
        └──────────────┬──────────────┘
                       │
                       ▼
        ┌─────────────────────────────┐
        │       VPS TCP Server        │
        │   app.tcp_server (existing) │
        │   Port 5200 (public)        │
        │   Handles signals, DB, etc. │
        └─────────────────────────────┘
```

---

## ⚙️ 2. Component Roles

### **A. MT5 EA**

* Establishes TCP connection to local bridge (`127.0.0.1:5050`).
* Sends JSON messages (auth, BUY/SELL/CLOSE signals).
* Expects JSON responses (confirmations or errors).
* Uses 4-byte big-endian length prefix for framing.

### **B. Local Bridge (New Component)**

* **Server-side:** Listens locally for EA clients.
* **Client-side:** Maintains a persistent connection to the VPS TCP server.
* **Responsibility:** Translate, forward, and maintain link reliability.
* **Core function:** “Local broker” for all trade-related traffic.

### **C. VPS Server**

* Already production-ready.
* Expects messages exactly as defined in the existing TCP protocol:

  * 4-byte length-prefixed JSON.
  * `secret_key` required on first message.
  * Responds with `status`, `message`, `signal_id`, and `client_msg_id`.

---

## 🔗 3. Message Flow Overview

### **Step 1 — EA connects to bridge**

* Bridge accepts socket.
* Sends handshake response (optional).

### **Step 2 — Bridge connects to VPS**

* On startup, bridge authenticates to `35.208.6.252:5200` with main secret key.
* Keeps the connection open persistently.

### **Step 3 — EA sends a signal**

```
EA → Bridge (localhost:5050)
{
  "action": "BUY",
  "symbol": "Crash 900 Index",
  "price": 20842.74
}
```

Bridge wraps message as:

```
{
  "action": "BUY",
  "symbol": "Crash 900 Index",
  "price": 20842.74,
  "bridge_id": "HCX_LOCAL_BRIDGE_01"
}
```

Then sends to VPS (via already-authenticated TCP connection).

### **Step 4 — VPS responds**

```
{
  "status": "success",
  "message": "Signal BUY processed successfully",
  "signal_id": 12
}
```

Bridge receives this, strips unneeded fields if necessary, and returns to EA:

```
{
  "status": "success",
  "signal_id": 12
}
```

---

## 🧩 4. Technical Design

### **A. TCP Server (Local Endpoint)**

* Listens on `127.0.0.1:5050`.
* Handles one EA connection at a time.
* Uses asyncio `StreamReader`/`StreamWriter` or threading socket model.
* Reads 4-byte header → payload.
* Responds with JSON (framed identically).

### **B. TCP Client (Remote Endpoint)**

* Connects to VPS at `35.208.6.252:5200`.
* Authenticates once using:

  ```json
  {"secret_key": "LZ2QThkLXWjmUCIADhLDu8tz4UwwQ35RnP3Bks76tjI"}
  ```
* Reconnects automatically on failure.
* Heartbeat/ping every 30s.

### **C. Core Relay Logic**

Each message from EA triggers:

1. Validate JSON format.
2. Forward to VPS (if connected).
3. Await confirmation (blocking or async).
4. Return confirmation to EA.
5. Log result.

If VPS is offline:

* Queue messages temporarily (in memory).
* Send error response to EA like:

  ```json
  {"status":"error","message":"Server temporarily unavailable"}
  ```

---

## 🛠️ 5. Reliability and Resilience

| Feature               | Description                                        |
| --------------------- | -------------------------------------------------- |
| **Auto-Reconnect**    | Reconnect to VPS if connection drops.              |
| **Local Queue**       | Stores up to N unsent messages if VPS unreachable. |
| **Timeout Handling**  | Fail after 10s of no VPS response.                 |
| **Heartbeat**         | Ping VPS every 30s.                                |
| **Structured Logs**   | All actions logged (INFO/ERROR).                   |
| **Graceful Shutdown** | Close both sockets on exit.                        |

---

## 🔒 6. Security and Keys

| Link         | Key                          | Notes                                                          |
| ------------ | ---------------------------- | -------------------------------------------------------------- |
| EA → Bridge  | Optional local shared secret | not required but can add `"local_key": "12345"` for validation |
| Bridge → VPS | Main production secret key   | already handled by your existing server code                   |

---

## 🧩 7. Configuration Summary

| Setting              | Example                                       |
| -------------------- | --------------------------------------------- |
| Local listen address | `127.0.0.1`                                   |
| Local port           | `5050`                                        |
| Remote VPS IP        | `35.208.6.252`                                |
| Remote VPS port      | `5200`                                        |
| Bridge ID            | `HCX_LOCAL_BRIDGE_01`                         |
| Main secret key      | `LZ2QThkLXWjmUCIADhLDu8tz4UwwQ35RnP3Bks76tjI` |
| Ping interval        | 30s                                           |

---

## 🔍 8. Logging Format Example

Example log output:

```
[2025-10-29 03:25:44] INFO: Bridge started on 127.0.0.1:5050
[2025-10-29 03:25:45] INFO: Connected to VPS 35.208.6.252:5200
[2025-10-29 03:25:45] INFO: Authenticated successfully
[2025-10-29 03:26:01] INFO: Received from EA: BUY Crash 900 Index @ 20842.74
[2025-10-29 03:26:01] INFO: Forwarded to VPS
[2025-10-29 03:26:01] INFO: VPS confirmation received: signal_id=42
[2025-10-29 03:26:01] INFO: Response sent back to EA
```

---

## ⚡ 9. Deployment Considerations

| Environment     | Notes                                                                               |
| --------------- | ----------------------------------------------------------------------------------- |
| Windows Desktop | Where MT5 runs; bridge runs as background Python script                             |
| VPS             | Already hosting the production TCP server                                           |
| Startup         | Add bridge to MT5’s startup script or run manually via console                      |
| Testing         | You can run the bridge locally and use `netcat` or your EA to simulate MT5 messages |

---

## 🧱 10. Future Extensions

* Add **TLS encryption** for VPS connection.
* Support multiple simultaneous EA clients (multi-account).
* Allow **command routing** from VPS to local MT5 EA (bi-directional).
* Include an **offline cache** to store signals if the VPS is temporarily unavailable.

---